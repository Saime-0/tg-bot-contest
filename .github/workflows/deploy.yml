name: deploy

on:
  push:
    branches:
      - main
      - master
  pull_request:

env:
  DEPLOY_DIR: /home/${{ secrets.PROD_SSH_USERNAME }}/src/tgbotcontest

permissions:
  contents: read
  # golangci:
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.62.0

  deploy:
    runs-on: ubuntu-latest
    needs: golangci

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH config
        run: |
          mkdir -p ~/.ssh
          cat <<EOF >> ~/.ssh/config
          Host Prod
            HostName ${{ secrets.PROD_SSH_HOST }}
            User ${{ secrets.PROD_SSH_USERNAME }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config

      - name: Add SSH key
        run: |
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: SSH check or prepare server for application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            sqlite --version
            set +e
#           Check and create the deployment directory if it not exist
            [ ! -d ${{ env.DEPLOY_DIR }} ] && mkdir -p ${{ env.DEPLOY_DIR }}
#           Check if database exists; if not, create it
            sqlite3 ${{ secrets.PROD_MAIN_DATABASE_DSN }} "SELECT 1;" > /dev/null 2>&1 || sqlite3 ${{ secrets.PROD_MAIN_DATABASE_DSN }} ""
#           Apply migrations
            DSN=${{ secrets.PROD_MAIN_DATABASE_DSN }} ./scripts/init-scheme.sh

      - name: Rsync copy project
        run: SSH_HOST=Prod DIR=${{ env.DEPLOY_DIR }}  ./scripts/rsync-project.sh

      - name: SSH start application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_SSH_HOST }}
          username: ${{ secrets.PROD_SSH_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.DEPLOY_DIR }}
            > deploy/.env
            echo TOKEN=${{ secrets.PROD_BOT_TOKEN }} >> deploy/.env
            echo MAIN_DATABASE_DSN=${{ secrets.PROD_MAIN_DATABASE_DSN }} >> deploy/.env
            docker compose -f deploy/docker-compose.yml up --force-recreate --build -d tgbotcontest
