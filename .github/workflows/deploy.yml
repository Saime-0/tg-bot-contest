name: deploy

on:
  push:
    branches:
      - main
      - master

env:
  PROJECT_DIR: src/tgbotcontest
  DB_DIR: .local/share/tgbotcontest
  DB_FILE_NAME: main.db
  DOCKER_DB_DSN: file:/var/lib/tgbotcontest/main.db?cache=shared

permissions:
  contents: read
  # golangci:
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  golangci:
    name: lint
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.62.0

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH config
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat <<EOF >> ~/.ssh/config
          Host Prod
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USERNAME }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config

      - name: SSH create dirs check sqlite3
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            [ ! -d ~/$PROJECT_DIR ] && mkdir -p ~/$PROJECT_DIR
            [ ! -d ~/$DB_DIR ] && mkdir -p ~/$DB_DIR
            sqlite3 --version

      - name: Rsync copy project
        run: SSH_HOST=Prod DIR=~/$PROJECT_DIR ./scripts/rsync-project.sh

  start_new_service:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: SSH start application
        uses: appleboy/ssh-action@v1.2.0
        with:
         host: ${{ secrets.SSH_HOST }}
         username: ${{ secrets.SSH_USERNAME }}
         key: ${{ secrets.SSH_KEY }}
         script: |
           set -e
           echo "" > ~/$PROJECT_DIR/deploy/.env
           echo TOKEN=${{ secrets.BOT_TOKEN }} >> ~/$PROJECT_DIR/deploy/.env
           echo MAIN_DATABASE_DSN=$DOCKER_DB_DSN >> ~/$PROJECT_DIR/deploy/.env
           docker compose -f ~/$PROJECT_DIR/deploy/docker-compose.yml up --force-recreate --build -d tgbotcontest

  rollback_service:
    runs-on: ubuntu-latest
    if: failure()
    needs: start_new_service
    steps:
      - name: SSH start application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: docker start tgbotcontest
